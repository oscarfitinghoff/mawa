var app = angular.module('woApp', ['firebase', 'ui.router', 'ui.bootstrap', 'chart.js']);
app.factory("Auth", ["$firebaseAuth", function($firebaseAuth) {
  var ref = new Firebase("https://mawa.firebaseio.com");
  return $firebaseAuth(ref);
}]);
app.factory('dataFactory', ['$firebaseArray', '$firebaseObject', function($firebaseArray, $firebaseObject) {

  return {
    getAccountData: function(user) {
      var ref = new Firebase('https://mawa.firebaseio.com/users/' + user + '/account');
      return $firebaseObject(ref);
    },
    getWorkoutData: function(user) {
      var ref = new Firebase('https://mawa.firebaseio.com/users/' + user + '/workouts');
      return $firebaseArray(ref);
    },
    addWorkoutData: function(user, theWorkout) {
      var ref = new Firebase('https://mawa.firebaseio.com/users/' + user + '/workouts');
      var data = $firebaseArray(ref);
      data.$add(theWorkout).then(function(data) {
        var id = data.key();
        console.log("added record with id " + id);
      });
    },
    getWeighingData: function(user) {
      var ref = new Firebase('https://mawa.firebaseio.com/users/' + user + '/weigh');
      return $firebaseArray(ref);
    },
    addWeighingData: function(user, theWeigh) {
      var ref = new Firebase('https://mawa.firebaseio.com/users/' + user + '/weigh');
      var data = $firebaseArray(ref);
      data.$add(theWeigh).then(function(data) {
        var id = data.key();
        console.log("added record with id " + id);
      });
    }
  }
}]);
app.run(["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
    // We can catch the error thrown when the $requireAuth promise is rejected
    // and redirect the user back to the home page
    if (error === "AUTH_REQUIRED") {
      $state.go("home");
    }
  });
}])

.config(function($stateProvider, $urlRouterProvider) {

  $urlRouterProvider.otherwise("/home");

  $stateProvider
    .state('home', {
      url: '/home',
      templateUrl: 'views/login.html',
      controller: 'loginCtrl'
    })
    .state('startPage', {
      url: '/startPage',
      templateUrl: 'views/startPage.html',
      controller: 'startPageCtrl',
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    .state('account', {
      url: '/account',
      templateUrl: 'views/account.html',
      controller: 'accCtrl',
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    .state('workouts', {
      url: '/workouts',
      templateUrl: 'views/workouts.html',
      controller: 'woCtrl',
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    .state('weighings', {
      url: '/weighings',
      templateUrl: 'views/weighings.html',
      controller: 'weighingsCtrl',
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      } 
    })
    .state('logout', {
      controller: function($state, Auth) {
        Auth.$unauth();
        $state.go('home');
      }
    })
});
app.controller('accCtrl', function(currentAuth, dataFactory, $scope) {

  $scope.userData = {
    account: []
  };

  var getUserData = function() {
    $scope.userData.account = dataFactory.getAccountData(currentAuth.uid);
    $scope.userData.account.$loaded().then(function() {
      var startDate = new Date($scope.userData.account.startWorkout);
      $scope.userData.account.startWorkout = startDate.customFormat("#YYYY#-#MM#-#DD#");
    });
  };

  getUserData();


  $scope.changePass = function() {
  };
});
app.controller("loginCtrl", ["$scope", "Auth", '$state', function($scope, Auth, $state) {
  
  var authData = Auth.$getAuth();
  if (authData) {
    $state.go('startPage');
  }

  $scope.loginError = false;
  $scope.login = function() {
    Auth.$authWithPassword({
      email: $scope.user.email,
      password: $scope.user.password
    }).then(function(authData) {
      $state.go('startPage');
    }).catch(function(error) {
      console.error(error);
      $scope.loginError = true;
    });
  };
}]);
app.controller('mainCtrl', ['$scope', 'Auth', function($scope, Auth) {
  Auth.$onAuth(function(authData) {
    if(authData) {
      $scope.authData = authData;
    }
  });

  Date.prototype.customFormat = function(formatString){
    var YYYY,YY,MMMM,MMM,MM,M,DDDD,DDD,DD,D,hhhh,hhh,hh,h,mm,m,ss,s,ampm,AMPM,dMod,th;
    YY = ((YYYY=this.getFullYear())+"").slice(-2);
    MM = (M=this.getMonth()+1)<10?('0'+M):M;
    MMM = (MMMM=["January","February","March","April","May","June","July","August","September","October","November","December"][M-1]).substring(0,3);
    DD = (D=this.getDate())<10?('0'+D):D;
    DDD = (DDDD=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][this.getDay()]).substring(0,3);
    th=(D>=10&&D<=20)?'th':((dMod=D%10)==1)?'st':(dMod==2)?'nd':(dMod==3)?'rd':'th';
    formatString = formatString.replace("#YYYY#",YYYY).replace("#YY#",YY).replace("#MMMM#",MMMM).replace("#MMM#",MMM).replace("#MM#",MM).replace("#M#",M).replace("#DDDD#",DDDD).replace("#DDD#",DDD).replace("#DD#",DD).replace("#D#",D).replace("#th#",th);
    h=(hhh=this.getHours());
    if (h==0) h=24;
    if (h>12) h-=12;
    hh = h<10?('0'+h):h;
    hhhh = h<10?('0'+hhh):hhh;
    AMPM=(ampm=hhh<12?'am':'pm').toUpperCase();
    mm=(m=this.getMinutes())<10?('0'+m):m;
    ss=(s=this.getSeconds())<10?('0'+s):s;
    return formatString.replace("#hhhh#",hhhh).replace("#hhh#",hhh).replace("#hh#",hh).replace("#h#",h).replace("#mm#",mm).replace("#m#",m).replace("#ss#",ss).replace("#s#",s).replace("#ampm#",ampm).replace("#AMPM#",AMPM);
  };
}]);
app.controller('selectDateCtrl', function($scope) {

  $scope.status = {
    opened: false
  };

  var setFilterWOStartDate = function($event) {
    $scope.status.opened = true;
  };
});
app.controller('startPageCtrl', function(currentAuth, dataFactory, $scope) {
  
});
app.controller('weighingsCtrl', function($scope, currentAuth, dataFactory) {
  //Make controller for both WO and WE that share the common stuff.
  $scope.userData = {
    account: [],
    weighings: [],
    newWeighings: {
      theDate: "",
      theWeight: "",
      theBF: "",
      theMuscle: "",
      theWater: "",
      theBones: ""
    },
    dateSelectors: {
      addWeighingDate: false
    }
  };

 $scope.chartData = {
    weighings: {
      labels: [],
      data: []
    }
  };


  var getUserData = function() {
    var today = new Date();

    $scope.userData.account = dataFactory.getAccountData(currentAuth.uid);
    $scope.userData.weighings = dataFactory.getWeighingData(currentAuth.uid);

    $scope.userData.newWeighings = {
      theDate: today.customFormat("#YYYY#-#MM#-#DD#")
    };

    $scope.userData.weighings.$loaded().then(function() {
      drawLineChart();
    })

  };

  getUserData();

  var drawLineChart = function() {
    $scope.chartData.weighings.labels = [];
    $scope.chartData.weighings.data = [[]];

    angular.forEach($scope.userData.weighings, function(value, key) {
      console
      $scope.chartData.weighings.labels.push(value.theWeighDate);
      $scope.chartData.weighings.data[0].push(value.theWeigh);
      //$scope.chartData.weighings.data[1].push(value.theBF);
      //$scope.chartData.weighings.data[2].push(value.theWater);
      //$scope.chartData.weighings.data[4].push(value.theMuscle);
      //$scope.chartData.weighings.data[5].push(value.theBones);
    });
  }


  $scope.addWeighing = function() {
    //function getTheWeek
    var newData = $scope.userData.newWeighings;
    var theWeighing = {
      theWeighDate: newData.theDate,
      theWeigh: newData.theWeight,
      theBF: newData.theBF,
      theMuscle: newData.theMuscle,
      theWater: newData.theWater,
      theBone: newData.theBones
    };
    dataFactory.addWeighingData(currentAuth.uid, theWeighing);
  };


  //Datepicker
  $scope.open = function($event, opened) {
    $scope.userData.dateSelectors[opened] = true;
  };



});
app.controller('woCtrl', function($scope, currentAuth, dataFactory) {
  
  //UserData structure
  $scope.userData = {
    account: [],
    workouts: [],
    theActivities: [],
    theLocations: [],
    newWorkout: {
      theDate: "",
      theLocation: "",
      theActivity: "",
      theDuration: "",
      theComment: ""
    },
    filterWO: {
      fromDate: "",
      toDate: "",
      activity: "",
      location: "",
      numOfWorkouts: {

      }
    },
    dateSelectors: {
      addWorkoutDate: false,
      filterFromDate: false,
      filterToDate: false
    },
    workoutStats: {
      numOfWeeks: "0",
      avgWorkoutsPerWeek: "",
      workoutsPerWeek: {

      },
      numOfWorkouts: {

      }
    }
  }

  $scope.chartData = {
    distribution: {
      labels: [],
      data: []
    },
    workoutsPerWeek: {
      labels: [],
      data: [[]]
    }
  }

  var getUserData = function() {
    var today = new Date();
    $scope.userData.account = dataFactory.getAccountData(currentAuth.uid);
    $scope.userData.workouts = dataFactory.getWorkoutData(currentAuth.uid);

    $scope.userData.newWorkout = {
      theDate: today.customFormat("#YYYY#-#MM#-#DD#")
    };
    $scope.userData.account.$loaded().then(function() {
      if($scope.userData.filterWO.fromDate === "") {
        var startDate = new Date($scope.userData.account.startWorkout);
        $scope.userData.filterWO.fromDate = startDate.customFormat("#YYYY#-#MM#-#DD#");
      }
      if($scope.userData.filterWO.toDate === "") {
        $scope.userData.filterWO.toDate = today.customFormat("#YYYY#-#MM#-#DD#");
      }
      //$scope.userData.workoutStats.numOfWeeks = Math.floor((Date.parse($scope.userData.filterWO.toDate) - Date.parse($scope.userData.filterWO.fromDate)) / 24*60*60*1000);
    });

    $scope.userData.workouts.$loaded().then(function() {
      var NOWobj = {};
      var WPWobj = {};
      angular.forEach($scope.userData.workouts, function(value, key) {

        //For piechart, distribution
        numberOfWorkouts(NOWobj, value);
        //For line chart, workouts per week
        workoutsPerWeek(WPWobj, value);

        //For autocomplete
        if($scope.userData.theActivities.indexOf(value.theActivity) == -1) {
          $scope.userData.theActivities.push(value.theActivity);
        }
        if($scope.userData.theLocations.indexOf(value.theLocation) == -1) {
          $scope.userData.theLocations.push(value.theLocation);
        }

        //Do dashboard stuff here so I don't have to look through it again?
        //calcWorkoutData(value);
      });
      $scope.userData.workoutStats.numOfWorkouts = NOWobj;
      $scope.userData.workoutStats.workoutsPerWeek = WPWobj;
      NOWobj = {};
      WPWobj = {};

      //Put this in the corresponding data gathering function?
      drawPieChart();
      drawLineChart();
    });
  };

  getUserData();
  //Remake!
  var numberOfWorkouts = function(obj, workout) {
    if(!obj.hasOwnProperty(workout.theActivity)) {
      obj[workout.theActivity] = 1;
    } else {
      obj[workout.theActivity]++;
    }
  };
  //Should include weeks with no workout perhaps?
  var workoutsPerWeek = function(obj, workout) {
    if(!obj.hasOwnProperty(workout.theWeek)) {
      obj[workout.theWeek] = 1;
    } else {
      obj[workout.theWeek]++;
    }
  }

  $scope.$watchGroup(['userData.filterWO.fromDate', 'userData.filterWO.toDate', 'userData.filterWO.activity', 'userData.filterWO.location', 'userData.workouts'], function() {
    var NOWobj = {};
    var WPWobj = {};
    angular.forEach($scope.filtered, function(value, key) {
      numberOfWorkouts(NOWobj, value);
      workoutsPerWeek(WPWobj, value);
    });
    $scope.userData.filterWO.numOfWorkouts = NOWobj;
    $scope.userData.filterWO.workoutsPerWeek = WPWobj;
    NOWobj = {};
    WPWobj = {};
    //Must i destroy old chart?
    reDrawPieChart();
    reDrawLineChart();
  });

  var drawLineChart = function() {
    $scope.chartData.workoutsPerWeek.labels = [];
    $scope.chartData.workoutsPerWeek.data = [[]];

    angular.forEach($scope.userData.workoutStats.workoutsPerWeek, function(value, key) {
      $scope.chartData.workoutsPerWeek.labels.push(key);
      $scope.chartData.workoutsPerWeek.data[0].push(value);
    });
  }
  var reDrawLineChart = function() {
    $scope.chartData.workoutsPerWeek.labels = [];
    $scope.chartData.workoutsPerWeek.data = [[]];

    if($scope.filtered.length !== 0) {
      angular.forEach($scope.userData.filterWO.workoutsPerWeek, function(value, key) {
        $scope.chartData.workoutsPerWeek.labels.push(key);
        $scope.chartData.workoutsPerWeek.data[0].push(value);
      });
    }
  }

  //make it one function instead of 2
  var drawPieChart = function() {
    $scope.chartData.distribution.labels = [];
    $scope.chartData.distribution.data = [];

    angular.forEach($scope.userData.workoutStats.numOfWorkouts, function(value, key) {
      $scope.chartData.distribution.labels.push(key);
      $scope.chartData.distribution.data.push(value);
    }); 
  }
  var reDrawPieChart = function() {
    $scope.chartData.distribution.labels = [];
    $scope.chartData.distribution.data = [];

    if($scope.filtered.length !== 0) {
      angular.forEach($scope.userData.filterWO.numOfWorkouts, function(value, key) {
        $scope.chartData.distribution.labels.push(key);
        $scope.chartData.distribution.data.push(value);
      });
    }
  }

  $scope.resetFilter = function() {
    var startDate = new Date($scope.userData.account.startWorkout);
    var today = new Date();

    $scope.userData.filterWO = {
      fromDate: startDate.customFormat("#YYYY#-#MM#-#DD#"),
      toDate: today.customFormat("#YYYY#-#MM#-#DD#"),
      activity: "",
      location: "",
      numOfWorkouts: {
      }
    }
  }
  
  $scope.addWorkout = function() {
    //function getTheWeek
    var newData = $scope.userData.newWorkout;
    var theWorkout = {
      theDate: newData.theDate,
      theLocation: newData.theLocation,
      theActivity: newData.theActivity,
      theDuration: newData.theDuration,
      theComment: newData.theComment,
      theWeek: getTheWeek(newData.theDate)
    };
    dataFactory.addWorkoutData(currentAuth.uid, theWorkout);
  };

  var getTheWeek = function(theDate) {
    var oneDay = 1000*60*60*24;
    var workoutDate = new Date(theDate);
    var startDate = new Date($scope.userData.account.startWorkout);
    var diff = workoutDate.getTime() - startDate;
    var theWeek = Math.ceil((diff/oneDay)/7);
    return theWeek;
  }
  
  //Datepicker
  $scope.open = function($event, opened) {
    $scope.userData.dateSelectors[opened] = true;
  };
});
app.directive('datepickerLocaldate', ['$parse', function($parse) {
  var directive = {
    restrict: 'A',
    require: ['ngModel'],
    link: link
  };
  return directive;

  function link(scope, element, attr, ctrls) {
    var ngModelController = ctrls[0];

    // called with a JavaScript Date object when picked from the datepicker
    ngModelController.$parsers.push(function(viewValue) {
      // undo the timezone adjustment we did during the formatting
      viewValue.setMinutes(viewValue.getMinutes() - viewValue.getTimezoneOffset());
      // we just want a local date in ISO format
      return viewValue.toISOString().substring(0, 10);
    });
  }
}]);
app.filter('woFilter', function() {
  return function(workouts, filterWO) {
    var filteredWorkouts = [];
    
    angular.forEach(workouts, function(workout) {
      var activity = filterWO.activity || "";
      var location = filterWO.location || "";

      if((workout.theDate >= filterWO.fromDate && workout.theDate <= filterWO.toDate) && 
         (workout.theActivity.toLowerCase().indexOf(activity.toLowerCase()) + 1) && 
         (workout.theLocation.toLowerCase().indexOf(location.toLowerCase()) + 1)) {
        filteredWorkouts.push(workout);
      }
    });
    return filteredWorkouts;
  };
});